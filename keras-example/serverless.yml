service: classify-image

frameworkVersion: '2'

provider:
  # REF: https://www.serverless.com/framework/docs/providers/aws/guide/functions/
  versionFunctions: false
  name: aws
  # REF: https://www.serverless.com/blog/container-support-for-lambda
  ecr:
    # In this section you can define images that will be built locally and uploaded to ECR
    images:
      appimage:
        path: ./  
  apiGateway:
    shouldStartNameWithService: true
    # REF: https://www.serverless.com/blog/framework-release-v142
    #binaryMediaTypes:
    #  - 'image/png'
    #  - ‘image/jpeg’
  lambdaHashingVersion: 20201221
  stage: dev
  region: us-east-1
  iam:
    role:
      statements:
      - Effect: 'Allow'
        Action:
          - 'lambda:InvokeFunction'
        Resource: "*"

functions:
  predict-image:
    image: 
      name: appimage 
    memorySize: 2048
    timeout: 30 
    events:
      - http:
          path: /get-image-name
          method: post
          #request:
            # REF: https://www.serverless.com/framework/docs/providers/aws/events/apigateway/#request-templates
          #  template:
          #    image/jpeg: '{ "stage" : "$context.stage" }'
          #    image/png: '{ "stage" : "$context.stage" }'
          #  passThrough: NEVER  

plugins:
  - serverless-plugin-warmup
  - serverless-api-gateway-throttling

custom:
  warmup:
    twentyFourHoursWarmer:
      enabled: true
      events:
        - schedule: cron(*/5 * ? * * *)
      concurrency: 1
  # https://github.com/DianaIonita/serverless-api-gateway-throttling
  apiGatewayThrottling:
    maxRequestsPerSecond: 1
    maxConcurrentRequests: 1
